const fs = require('fs');
const path = require('path');

// Try to load config env lists
let REQUIRED_ENV_VARS = [
  'WHATSAPP_ACCESS_TOKEN',
  'WHATSAPP_PHONE_NUMBER_ID',
  'WHATSAPP_VERIFY_TOKEN',
  'ENCRYPTION_KEY'
];
let OPTIONAL_ENV_VARS = {
  PORT: '3000',
  NODE_ENV: 'production',
  LOG_LEVEL: 'info'
};

try {
  const envConfig = require('../config/env');
  if (Array.isArray(envConfig.REQUIRED_ENV_VARS)) REQUIRED_ENV_VARS = envConfig.REQUIRED_ENV_VARS;
  if (envConfig.OPTIONAL_ENV_VARS && typeof envConfig.OPTIONAL_ENV_VARS === 'object') OPTIONAL_ENV_VARS = envConfig.OPTIONAL_ENV_VARS;
} catch (err) {
  // fallback to defaults above
}

// Always include common DB keys and owner credentials
const DB_KEYS = ['DATABASE_URL','DB_HOST','DB_PORT','DB_NAME','DB_USER','DB_PASSWORD'];
const OWNER_KEYS = ['OWNER_EMAIL','OWNER_PASSWORD'];

const allKeys = Array.from(new Set([].concat(REQUIRED_ENV_VARS, DB_KEYS, OWNER_KEYS, Object.keys(OPTIONAL_ENV_VARS))));

const lines = [];
lines.push('# .env.example - generated by scripts/generate-env.js');
lines.push('# Copy values from this file into your host environment (Render/Heroku/Vercel)');
lines.push('# For Render: go to your Service -> Environment -> Environment Variables and paste the keys below, then update values.');
lines.push('');
lines.push('# --- Required variables ---');
allKeys.forEach(k => {
  let example = '';
  if (k === 'DATABASE_URL') example = 'postgresql://user:pass@host:5432/dbname?sslmode=require';
  else if (k === 'ENCRYPTION_KEY') example = 'replace_with_a_32_char_random_string';
  else if (k === 'OWNER_EMAIL') example = 'owner@example.com';
  else if (k === 'OWNER_PASSWORD') example = 'MyPassword@123';
  else if (k === 'WHATSAPP_ACCESS_TOKEN') example = 'whatsapp_access_token_here';
  else if (k === 'WHATSAPP_PHONE_NUMBER_ID') example = '1234567890';
  else if (k === 'WHATSAPP_VERIFY_TOKEN') example = 'verify-token-here';
  else if (Object.prototype.hasOwnProperty.call(OPTIONAL_ENV_VARS, k)) example = OPTIONAL_ENV_VARS[k] || '';
  else example = '';

  lines.push(`${k}=${example}`);
});

lines.push('');
lines.push('# Notes:');
lines.push('# - Do NOT commit real secrets to the repository. Use the host provider secret store (Render/Heroku/Vercel).');
lines.push('# - After deployment, update the environment values via your host dashboard.');

const dest = path.join(__dirname, '..', '.env.example');
fs.writeFileSync(dest, lines.join('\n'), 'utf8');
console.log(`✓ .env.example generated at ${dest}`);

// Generate a render.yaml template (for Render deployments)
const renderYamlLines = [];
renderYamlLines.push('# render.yaml - template for Render services environment variables');
renderYamlLines.push('services:');
renderYamlLines.push('- type: web');
renderYamlLines.push('  name: drugsng-whatsapp-bot');
renderYamlLines.push('  env: production');
renderYamlLines.push('  plan: free');
renderYamlLines.push('  buildCommand: "npm install && npm run build || true"');
renderYamlLines.push('  startCommand: "npm run start"');
renderYamlLines.push('  envVars:');
allKeys.forEach(k => {
  renderYamlLines.push(`    - key: ${k}`);
  renderYamlLines.push(`      value: "REPLACE_ME"`);
  renderYamlLines.push(`      sync: false`);
});

const renderDest = path.join(__dirname, '..', 'render.yaml');
fs.writeFileSync(renderDest, renderYamlLines.join('\n'), 'utf8');
console.log(`✓ render.yaml template generated at ${renderDest}`);

console.log('\nNext steps:');
console.log('- Copy .env.example values into your host provider environment variables (Render, Vercel, Heroku).');
console.log('- Or use render.yaml to preconfigure Render deployments (you may need to attach it in your repo).');
console.log('- Run `node scripts/generate-env.js` locally to regenerate templates.');
